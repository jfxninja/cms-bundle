<?php

namespace ssone\CMSBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\Util\SecureRandom;

/**
 * @ORM\Entity(repositoryClass="ssone\CMSBundle\Entity\FieldsRepository")
 * @ORM\HasLifecycleCallbacks
 * @ORM\Table(name="ssone_fields")
 */
class Field  {

    /**
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id()
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\Column(name="securekey", type="string", length=32)
     */
    private $securekey;

    /**
     * @ORM\Column(name="sort", type="integer")
     */
    private $sort;

    /**
     * @ORM\Column(name="name", type="string", length=120)
     */
    private $name;

    /**
     * @ORM\Column(name="variableName", type="string", length=120)
     */
    private $variableName;

    /**
     * @ORM\Column(name="isRepeatable", type="boolean")
     */
    private $isRepeatable;

    /**
     * @ORM\Column(name="isRequired", type="boolean")
     */
    private $isRequired;

    /**
     * @ORM\Column(name="requiredText", type="string", nullable=true)
     */
    private $requiredText;

    /**
     * @ORM\Column(name="repeatableGroupLabel", type="string", length=120, nullable=true)
     */
    private $repeatableGroupLabel;

    /**
     * @ORM\Column(name="gridNewRow", type="boolean", nullable=true)
     */
    private $gridNewRow;

    /**
     * @ORM\Column(name="gridColsSmall", type="string", length=120, nullable=true)
     */
    private $gridColsSmall;

    /**
     * @ORM\Column(name="gridColsMedium", type="string", length=120, nullable=true)
     */
    private $gridColsMedium;

    /**
     * @ORM\Column(name="gridColsLarge", type="string", length=120, nullable=true)
     */
    private $gridColsLarge;

    /**
     * @ORM\Column(name="createdBy", type="string", length=120)
     */
    private $createdBy;

    /**
     * @ORM\Column(name="modifiedBy", type="string", length=120)
     */
    private $modifiedBy;

    /**
     * @ORM\Column(name="createdAt", type="datetime")
     */
    protected $createdAt;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $modifiedAt;

    /**
     * @ORM\Column(name="label", type="string", length=120)
     */
    private $label;

    /**
     * @ORM\Column(name="settings", type="array", length=3000, nullable=true)
     */
    private $fieldTypeSettings;

    /**
     * @ORM\ManyToOne(targetEntity="FieldType", inversedBy="fields")
     * @ORM\JoinColumn(name="fk_fieldType_id", referencedColumnName="id")
     */
    protected $fieldType;

    /**
     * @ORM\ManyToOne(targetEntity="ContentType", inversedBy="variableFields")
     * @ORM\JoinColumn(name="fk_contentType_id__variable", referencedColumnName="id")
     */
    protected $contentTypeByVariable;

    /**
     * @ORM\ManyToOne(targetEntity="ContentType", inversedBy="attributeFields")
     * @ORM\JoinColumn(name="fk_contentType_id__attribute", referencedColumnName="id")
     */
    protected $contentTypeByAttribute;

    /**
     * @ORM\OneToMany(targetEntity="Block",  mappedBy="field", cascade={"persist", "remove"})
     */
    protected $blocks;


    /**
     * Now we tell doctrine that before we persist or update we call the updatedTimestamps() function.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     */
    public function updateTimestamps()
    {
        $this->setModifiedAt(new \DateTime(date('Y-m-d H:i:s')));

        if($this->getCreatedAt() == null)
        {
            $this->setCreatedAt(new \DateTime(date('Y-m-d H:i:s')));
        }
    }

    /**
     *
     * @ORM\PrePersist
     */
    public function generateSecurekey()
    {
        $generator = new SecureRandom();
        $random = $generator->nextBytes(150);
        $securekey = md5($random);
        $this->setSecurekey($securekey);
    }


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set securekey
     *
     * @param string $securekey
     * @return Field
     */
    public function setSecurekey($securekey)
    {
        $this->securekey = $securekey;

        return $this;
    }

    /**
     * Get securekey
     *
     * @return string 
     */
    public function getSecurekey()
    {
        return $this->securekey;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Field
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set createdBy
     *
     * @param string $createdBy
     * @return Field
     */
    public function setCreatedBy($createdBy)
    {
        $this->createdBy = $createdBy;

        return $this;
    }

    /**
     * Get createdBy
     *
     * @return string 
     */
    public function getCreatedBy()
    {
        return $this->createdBy;
    }

    /**
     * Set modifiedBy
     *
     * @param string $modifiedBy
     * @return Field
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->modifiedBy = $modifiedBy;

        return $this;
    }

    /**
     * Get modifiedBy
     *
     * @return string 
     */
    public function getModifiedBy()
    {
        return $this->modifiedBy;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Field
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set modifiedAt
     *
     * @param \DateTime $modifiedAt
     * @return Field
     */
    public function setModifiedAt($modifiedAt)
    {
        $this->modifiedAt = $modifiedAt;

        return $this;
    }

    /**
     * Get modifiedAt
     *
     * @return \DateTime 
     */
    public function getModifiedAt()
    {
        return $this->modifiedAt;
    }

    /**
     * Set label
     *
     * @param string $label
     * @return Field
     */
    public function setLabel($label)
    {
        $this->label = $label;

        return $this;
    }

    /**
     * Get label
     *
     * @return string 
     */
    public function getLabel()
    {
        return $this->label;
    }



    /**
     * Set fieldType
     *
     * @param \ssone\CMSBundle\Entity\FieldType $fieldType
     * @return Field
     */
    public function setFieldType(\ssone\CMSBundle\Entity\FieldType $fieldType = null)
    {
        $this->fieldType = $fieldType;

        return $this;
    }

    /**
     * Get fieldType
     *
     * @return \ssone\CMSBundle\Entity\FieldType
     */
    public function getFieldType()
    {
        return $this->fieldType;
    }

    /**
     * Set variableName
     *
     * @param string $variableName
     * @return Field
     */
    public function setVariableName($variableName)
    {
        $this->variableName = $variableName;

        return $this;
    }

    /**
     * Get variableName
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->variableName;
    }

 

    /**
     * Set settings
     *
     * @param array $fieldTypeSettings
     * @return Field
     */
    public function setFieldTypeSettings($fieldTypeSettings)
    {
        $this->fieldTypeSettings = $fieldTypeSettings;

        return $this;
    }

    /**
     * Get settings
     *
     * @return array 
     */
    public function getFieldTypeSettings()
    {
        return $this->fieldTypeSettings;
    }



    /**
     * Set contentTypeByVariable
     *
     * @param \ssone\CMSBundle\Entity\ContentType $contentTypeByVariable
     * @return Field
     */
    public function setContentTypeByVariable(\ssone\CMSBundle\Entity\ContentType $contentTypeByVariable = null)
    {
        $this->contentTypeByVariable = $contentTypeByVariable;

        return $this;
    }

    /**
     * Get contentTypeByVariable
     *
     * @return \ssone\CMSBundle\Entity\ContentType 
     */
    public function getContentTypeByVariable()
    {
        return $this->contentTypeByVariable;
    }

    /**
     * Set contentTypeByAttribute
     *
     * @param \ssone\CMSBundle\Entity\ContentType $contentTypeByAttribute
     * @return Field
     */
    public function setContentTypeByAttribute(\ssone\CMSBundle\Entity\ContentType $contentTypeByAttribute = null)
    {
        $this->contentTypeByAttribute = $contentTypeByAttribute;

        return $this;
    }

    /**
     * Get contentTypeByAttribute
     *
     * @return \ssone\CMSBundle\Entity\ContentType 
     */
    public function getContentTypeByAttribute()
    {
        return $this->contentTypeByAttribute;
    }

    /**
     * Set isRepeatable
     *
     * @param boolean $isRepeatable
     * @return Field
     */
    public function setIsRepeatable($isRepeatable)
    {
        $this->isRepeatable = $isRepeatable;

        return $this;
    }

    /**
     * Get isRepeatable
     *
     * @return boolean 
     */
    public function getIsRepeatable()
    {
        return $this->isRepeatable;
    }

    /**
     * Set repeatableGroupLabel
     *
     * @param string $repeatableGroupLabel
     * @return Field
     */
    public function setRepeatableGroupLabel($repeatableGroupLabel)
    {
        $this->repeatableGroupLabel = $repeatableGroupLabel;

        return $this;
    }

    /**
     * Get repeatableGroupLabel
     *
     * @return string 
     */
    public function getRepeatableGroupLabel()
    {
        return $this->repeatableGroupLabel;
    }

    /**
     * Set sort
     *
     * @param integer $sort
     * @return Field
     */
    public function setSort($sort)
    {
        $this->sort = $sort;

        return $this;
    }

    /**
     * Get sort
     *
     * @return integer 
     */
    public function getSort()
    {
        return $this->sort;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->blocks = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add blocks
     *
     * @param \ssone\CMSBundle\Entity\Block $blocks
     * @return Field
     */
    public function addBlock(\ssone\CMSBundle\Entity\Block $blocks)
    {
        $this->blocks[] = $blocks;

        return $this;
    }

    /**
     * Remove blocks
     *
     * @param \ssone\CMSBundle\Entity\Block $blocks
     */
    public function removeBlock(\ssone\CMSBundle\Entity\Block $blocks)
    {
        $this->blocks->removeElement($blocks);
    }

    /**
     * Get blocks
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getBlocks()
    {
        return $this->blocks;
    }

    /**
     * Set isRequired
     *
     * @param boolean $isRequired
     * @return Field
     */
    public function setIsRequired($isRequired)
    {
        $this->isRequired = $isRequired;

        return $this;
    }

    /**
     * Get isRequired
     *
     * @return boolean 
     */
    public function getIsRequired()
    {
        return $this->isRequired;
    }

    /**
     * Set requiredText
     *
     * @param string $requiredText
     * @return Field
     */
    public function setRequiredText($requiredText)
    {
        $this->requiredText = $requiredText;

        return $this;
    }

    /**
     * Get requiredText
     *
     * @return string
     */
    public function getRequiredText()
    {
        return $this->requiredText;
    }
}
